#!/usr/bin/env python

import sys
import os
import re
import subprocess

try:
    import setuptools
except ImportError:
    pass

from distutils.command.install import install
from distutils.command.build import build
from distutils.command.build_ext import build_ext
from distutils.core import setup
from distutils.errors import DistutilsError
from setuptools.command.develop import develop

if os.name == 'nt':
    ninja_executable = 'ninja.exe'
else:
    ninja_executable = './ninja'

class NinjaBuildExt(build_ext):
    def run(self):
        if not os.path.exists(self.build_temp):
            os.makedirs(self.build_temp)

        if os.path.exists(os.path.join(self.build_temp, 'build.ninja')):
            self.build_with_ninja()
        else:
            self.run_configure()

    def run_external_command(self, args, *varargs, **kwds):
        try:
            subprocess.check_call(args=args, *varargs, **kwds)
        except subprocess.CalledProcessError:
            raise DistutilsError('command failed: %s' % ' '.join(args))

    def run_configure(self):
        configure_args = ['--with-python='+sys.executable,
                          '--enable-pyninja',
                          '--bootstrap']
        if self.debug:
            configure_args += ['--debug']

        env = os.environ.copy()

        if self.swig is not None:
            env['SWIG'] = self.swig

        configure_path = os.path.relpath(os.path.abspath('configure.py'),
                                         os.path.abspath(self.build_temp))
        self.run_external_command([sys.executable, configure_path] + configure_args,
                                  env=env, cwd=self.build_temp)

    def build_with_ninja(self):
        self.run_external_command(args=[ninja_executable, 'pyninja'], cwd=self.build_temp)

class NinjaDevelop(develop):
    def finalize_options(self):
        pass

    def run(self):
        self.run_command("build")
        # super(NinjaInstall, self).run()

class NinjaInstall(install):
    pass

def extract_version():
    r = re.compile(r'const char\* kNinjaVersion = "(.*?)(\.git)?";')
    f = open(os.path.join("src", "version.cc"))

    try:
        content = f.read()
    finally:
        f.close()

    return r.search(content).group(1)

version = extract_version()

commands = {
    # 'build': NinjaBuild,
    'build_ext': NinjaBuildExt,
    'install': NinjaInstall,
    'develop': NinjaDevelop,
}

setup(
    name='pyninja',
    version=version,
    cmdclass=commands,
    url='https://ninja-build.org/',
    description='Ninja is a small build system with a focus on speed.',
    long_description='''Ninja is a small build system with a focus on speed. It
    differs from other build systems in two major respects: it is designed to
    have its input files generated by a higher-level build system, and it is
    designed to run builds as fast as possible.  This package represents
    the Python interface to use Ninja as a library.
    ''',
    license='Apache License Version 2.0',
    classifiers=[
        'Development Status :: 3 - Alpha',
        'Environment :: Console',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Operating System :: Microsoft :: Windows',
        'Operating System :: POSIX',
        'Programming Language :: C++',
        'Programming Language :: Python'
        'Programming Language :: Python :: 2 :: Only',
        'Topic :: Software Development',
        'Topic :: Software Development :: Build Tools',
    ],
)
