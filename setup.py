#!/usr/bin/env python

import sys
import os
import re
import subprocess

try:
    import setuptools
except ImportError:
    pass

from distutils.cmd import Command
from distutils.command.install import install
from distutils.core import setup
from distutils.errors import DistutilsError

if os.name == 'nt':
    ninja_executable = 'ninja.exe'
else:
    ninja_executable = './ninja'

class build(Command):
    user_options = [
        ('swig=', None,
         "path to the SWIG executable"),
        ('debug', 'g',
         "compile extensions and libraries with debugging information"),
   ]

    boolean_options = ['debug']

    def initialize_options(self):
        self.swig = None
        self.debug = None

    def finalize_options(self):
        pass
 
    def run(self):
        self.run_configure()
        self.build_with_ninja()

    def run_external_command(self, args, *varargs, **kwds):
        try:
            subprocess.check_call(args=args, *varargs, **kwds)
        except subprocess.CalledProcessError:
            raise DistutilsError('command failed: %s' % ' '.join(args))

    def run_configure(self):
        configure_args = ['--with-python='+sys.executable,
                          '--enable-pyninja']
        if self.debug:
            configure_args += ['--debug']

        if not os.path.exists(ninja_executable):
            configure_args += ['--bootstrap']

        env = os.environ.copy()

        if self.swig is not None:
            env['SWIG'] = self.swig

        self.run_external_command([sys.executable, 'configure.py'] + configure_args,
                                  env=env)

    def build_with_ninja(self):
        self.run_external_command(args=[ninja_executable, 'pyninja'])

class NinjaInstall(install):
    pass

def extract_version():
    r = re.compile(r'const char\* kNinjaVersion = "(.*)";')
    f = open(os.path.join("src", "version.cc"))

    try:
        content = f.read()
    finally:
        f.close()

    return r.search(content).group(1)

version = extract_version()

setup(
    name='pyninja',
    version=version,
    cmdclass={'build': build, 'install': NinjaInstall},
    url='https://ninja-build.org/',
    description='Ninja is a small build system with a focus on speed.',
    long_description='''Ninja is a small build system with a focus on speed. It
    differs from other build systems in two major respects: it is designed to
    have its input files generated by a higher-level build system, and it is
    designed to run builds as fast as possible.  This package represents
    the Python interface to use Ninja as a library.
    ''',
    license='Apache License Version 2.0',
    classifiers=[
        'Development Status :: 3 - Alpha',
        'Environment :: Console',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: Apache Software License',
        'Operating System :: Microsoft :: Windows',
        'Operating System :: POSIX',
        'Programming Language :: C++',
        'Programming Language :: Python'
        'Programming Language :: Python :: 2 :: Only',
        'Topic :: Software Development',
        'Topic :: Software Development :: Build Tools',
    ],
)
